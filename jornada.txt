# -> https://app.rocketseat.com.br/

Conhecendo o Git 
Controle de versão 
 -> commit -> commit -> |> branch -> linha do tempo 
                            main 


projeto -> pasta e arquivo                             

modificações -> stage area -> commit
  local <|- repository -|> remote 
     pc <|- repository -|> github 




configurando credencias 

git config --global user.name ""
git config --global user.email "email da conta github"

Git comandos para trabalhar com repositórios local

git int 		-> inicia o git (repository) no seu projeto
git status  -> Verificar alterações de pastas e arquivos no projeto 
git add .   -> adiciona todos os arquivos e pastas modificados, ao stage are 
git commit -m "message here" -> cria e descreve um pontoe na historia
git log ->  -> histórico de commit do projeto

remover arquivos da stage area 
use "git rm --cached <file>..." to unstage

Modificando a mensagem do ultimo commit 
git commit -"mensagem modificada" --amend


git log -> q pra sair do git log 

retornando ao commit anterior passado 
git checkout id .. 288912ae655840b162fd6a4f0b05cc998d5d8c8e

retornado ao tempo presente 
git checkout branch principal main ou master 

git checkout master 


recuperar arquivo deletado! (já commitado)

git checkout id do commit da onde deseja recuperar o arquivo.. -- arquivo.ttt
 git checkout  53781b7326f1.. --  git.txt
  o git recupera o arquivo e o coloca devolta no stage area...

arquivo deletado que não foi colocado no stage area ou commitado
git restore arquivo..


git pull -> baixa (puxa) modificações do repositório remoto para repositório local
git push -> envia (empurra) as modificações locais para o repositório remoto


Utilizando o Github como um controle de versão completo
No github com atalho .(final) abre uma interface como do vscode, onde é possível editar o projeto...
 -> https://app.rocketseat.com.br/classroom/versionamento-de-codigo/group/conhecendo-o-github/lesson/utilizando-o-github-como-um-controle-de-versao-completo


 -> https://www.fronteditor.dev/
 # HTML 
 Hypertext -> Hipertexto  -> links 
 markup    -> Marcaçõa -> tags
 Language  -> Linguagem

 # Cometários  -> são ignorados -> 
      <!-- comentários HTML -->

 # Anatomia das Tags
   Markup -> tags 
     <h1> Título I <h1/>   <!-- tag Head 1 -->

     tags podem ter atributos 
      <h1 id="title1"> Titúlo 1</h1>

    pode ter tag sem conteúdo
     elementos vazios
      não possuem contúdo
      poderão conter atributos
      <img src="" alt=""/>

      tags sem conteúdo e sem atributos 
      <br/> quebra de linha

      <p> paragrafo (              )  espaços e 
      quebra de linhas serão ignorados! </P>

      codígo para inserir espaço em texto (&nbsp;) => um espaço
      <br/> um quebra de linha

      Fluxo HTML

  <!-- Fluxo HTML
     * block (um abaixo do outro)
     * inline (um ao lado do outro mesma linha)
   -->

        <p>--um bloco--</p>   <!-- block -->
        <p>--outro bloco--</p>  
        um abaixo do outro ... nem todas tags funcionam assim!

        <a href="#">link1</a>   <!-- inline -->
        Mesmo estando um a baixo do outro o Html vai colocanos inline -> na mesma linha

        <a href="#">link2</a>

       Aninhamento de Tags

 <!-- Aninhamento de Tags 
  tags dentro de outras!! pai -> filhas
 -->


 <p>Lorem ipsum sit amet, <em>consectetur</em> <strong>adipiscing</strong> elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>

  <code></code> mostra o conteúdo com formato diferente 
  <!-- Caracteres Reservados -->
<p> escapando o abre paragrafo
  <code>&lt;p&gt;</code> 
</p>

atributos Globais
-> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Global_attributes

 class * atributo global usada para classificar elementos
   <div class="produto"> Cigarro </div>
   <div class="produto calçados">   Tênis </div>
 * <div class="produto↓ camisetas"> Camisa </div>
            #    separado por espaço -> como uma segunda classificação
    -> essas classificações podem ser tratadas no javascript/css
        * produto   3 elementos 
        * camisetas 1 elemento
        * calçados  1 elemento

# Atributo data-.. (-alguma coisa)  
<div data-id="1234"> bla bla </div>
      * depois do - qualquer coisa (sem espaços ou Caracteres especiais ou números)
-> essas classificações depois do - podem ser tratadas no javascript/css
            
#Atributo global style     
   <div style="color:blue">asdf</div>     
      é melhor evitar o uso dessa tag...
       o estilo aplicado dessa forma vai sobrepor qualquer outro!